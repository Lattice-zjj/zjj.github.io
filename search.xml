<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《模式识别》习题</title>
      <link href="/zjj.github.io/mo-shi-shi-bie-xi-ti-jie-da/"/>
      <url>/zjj.github.io/mo-shi-shi-bie-xi-ti-jie-da/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bd9f361eddd81fc268fb7386b48c8e03f263f125d0644530da505336269d0556"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">输入密码查看内容哦 >_< !</span>      </label>    </div>  </div></div><script data-pjax src="/zjj.github.io/lib/hbe.js"></script><link href="/zjj.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>&lt;计算机网络&gt;复习</title>
      <link href="/zjj.github.io/ji-suan-ji-wang-luo-fu-xi/"/>
      <url>/zjj.github.io/ji-suan-ji-wang-luo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="Internet基本概念"><a href="#Internet基本概念" class="headerlink" title="Internet基本概念"></a>Internet基本概念</h2><h3 id="什么是Internet"><a href="#什么是Internet" class="headerlink" title="什么是Internet"></a>什么是Internet</h3><ul><li>能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件</li><li>能够根据为分布式应用提供服务的联网基础设施来描述因特网</li></ul><h3 id="组成、服务、协议"><a href="#组成、服务、协议" class="headerlink" title="组成、服务、协议"></a>组成、服务、协议</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>所有联网设备称为主机(host) 、端系统(end system)</li><li>端系统通过通信链路(communication link)和分组交换机(packet switch)连接到一起</li><li>链路的传输速率(transmission rate)以比特/秒度量(bit/s,或bps)</li><li>分组交换机主要包括的路由器(router)和链路层交换机(link-layer switch)</li><li>从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机成为通过该网络的路径(route/path)</li><li>端系统通过因特网服务提供商(Internet Service Provider, ISP)接入因特网</li></ul><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li>端系统、分组交换机和其他部件都要运行一系列协议(protocol)，TCP(Transmission Control Protocol 传输控制协议)和IP(Internet Protocol 国际协议)是因特网中两个最为重要的协议</li><li>因特网标准(Internet standard)由因特网工程任务组(IETF)研发，其的标准文档称为请求评论(Request For Comment RFC)</li></ul><h4 id="服务描述"><a href="#服务描述" class="headerlink" title="服务描述"></a>服务描述</h4><ul><li>分布式应用程序(distributed application)</li><li>与因特网相连的端系统提供了一个套接字接口(socket interface)，该接口规定了运行在一个端系统上的程序请求因特网基础设施向运行在另一个端系统上的特定目的地程序交付数据的方式</li></ul><h3 id="网络边缘、网络接入（家庭、公司、无线）、网络核心"><a href="#网络边缘、网络接入（家庭、公司、无线）、网络核心" class="headerlink" title="网络边缘、网络接入（家庭、公司、无线）、网络核心"></a>网络边缘、网络接入（家庭、公司、无线）、网络核心</h3><h4 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h4><blockquote><p>之前说过通常把与因特网相连的计算机和其他设备称为端系统；因为它们位于因特网的边缘，故而被称为端系统。</p></blockquote><ul><li>端系统也称为<em>主机</em>；即主机$=$端系统；</li><li>主机有时又被进一步划分为两类：客户(client)和服务器(server)</li><li>今天，大部分提供搜索结果、电子邮件、Web页面和视频的服务器都属于大型数据中心(data center)</li></ul><h4 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h4><p>接入网(access network)：这是指将端系统连接到其边缘路由器(edge router)的网络</p><ul><li>家庭接入<ul><li>数字用户线(Digital Subscriber Line, DSL) (非对称)<img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210618163159528.png" alt="image-20210618163159528"></li><li>电缆因特网接入(cable Internet access)</li><li>光纤到户(Fiber To The Home, FTTH)，分为主动光纤网络(AON)，和被动光纤网络(PON)</li><li>拨号与卫星</li></ul></li><li>企业接入<ul><li>以太网</li><li>Wifi</li></ul></li><li>广域无线接入<ul><li>3G、4G/LTE、5G….</li></ul></li></ul><h4 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a>物理媒体</h4><p>对于每个发射器-接收器对，通过跨越一种物理媒体传播电磁波或光脉冲来发送比特。</p><p>物理媒体分为两种类型：导引型媒体和非导引型媒体。</p><ul><li>双绞铜线</li><li>同轴电缆</li><li>光纤</li><li>陆地无线电信道</li><li>卫星无线电信道</li></ul><h4 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h4><p>互联因特网端系统的分组交换机和链路构成的网状网路</p><h3 id="电路交换、分组交换、虚电路"><a href="#电路交换、分组交换、虚电路" class="headerlink" title="电路交换、分组交换、虚电路"></a>电路交换、分组交换、虚电路</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>当两台主机要通信时，该网络在两台主机之间建立一条专用的端到端连接（end-to-end connection）。</p><p>在电路交换网络中，在端系统间通信会话期间，预留了端系统间通信沿路径所需要的资源（缓存，链路传输速率）。</p><p>例子：传统的电话网络，在发送方能够发送信息之前，网络必须在发送方和接收方之间建立起一个连接，这是一条名副其实的连接。</p><p><strong>电路交换网络中的复用</strong></p><ul><li>复用：通过频分复用（FDM）、时分复用（TDM）实现电路。<ul><li>FDM：每条电路持续的得到部分带宽     <strong>连续部分带宽</strong></li><li>TDM：每条电路在短时间间隔（即时隙）中周期性地得到所有的带宽<br>传输速率 $=$ 帧速率 $ * $ 一个时隙的比特数量。<strong>周期性全部带宽</strong></li></ul></li><li>静默期（silent period）利用率不够高。</li></ul><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><ul><li>端系统彼此交换报文（message）</li><li>分组交换机（路由器、链路层交换器）</li><li>存储转发传输：必须接收到整个分组，然后才能进行输出。 通过由$N$条速率均为$R$的链路组成的路径（$N-1$台路由器），端到端时延是$d = N \dfrac{L}{R}$</li><li>排队时延：链路正忙于传输其他分组时，该到达分组必须在输出缓存中等待。</li><li>分组丢失（丢包）：缓存已被其他等待传输的分组充满，必须将当前分组或正在排队的一个分组丢弃。</li><li>转发表：将目的地址（或目的地址的一部分）映射成为输出链路。</li><li>路由选择协议：自动地设置转发表。</li><li>转发表和路由协议：转发表将目的地址映射为输出链路 ，路由协议设置转发表</li></ul><h4 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h4><p>电路交换+分组交换，底层分组交换，预留资源，带宽</p><ul><li>Routes or main cross roads are fixed</li><li>Resources shared, congestion control needed</li><li>Resources can be preserved, leading to different performance</li><li>Connection setup/teardown needed</li></ul><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210618192454000.png" alt="image-20210618192454000"></p><p><strong>优缺点比较</strong></p><p>对比：</p><p>分组交换</p><p>缺点：</p><p>1.不适合实时任务，端到端时延可变，不可预测的性能</p><p>2.需要缓存管理和拥塞控制</p><p>优点：</p><p>1.更好地带宽共享，网络资源利用效率高。</p><p>2.更简单，有效，实现成本更低。</p><p>3.更加健壮，可以处理恶劣情况。</p><p>电路交换</p><p>优点</p><ul><li>可预测的性能，预留资源，保证带宽和速率</li><li>一旦建立连接，交换简单，快捷</li></ul><p>缺点</p><ul><li>在静默期专用电路空闲效率低，资源不能被其他连接使用。专用资源，在流量突发时效率低。</li><li>端到端创建电路和预留带宽复杂，需要复杂的信令软件协调路径上的交换机</li><li>建立连接增加时延</li><li>交换失败，连接也就失败。</li></ul><h2 id="协议体系结构"><a href="#协议体系结构" class="headerlink" title="协议体系结构"></a>协议体系结构</h2><h3 id="多层协议体系结构的必要性"><a href="#多层协议体系结构的必要性" class="headerlink" title="多层协议体系结构的必要性"></a>多层协议体系结构的必要性</h3><p>协议分层具有概念化和结构化的优点。分层提供了一种结构化方式讨论系统组件，模块化使更新系统组件更为容易。减少复杂度，提高灵活度</p><h3 id="OSI与TCP-IP模型"><a href="#OSI与TCP-IP模型" class="headerlink" title="OSI与TCP/IP模型"></a>OSI与TCP/IP模型</h3><h4 id="各层名称、层次之间的关系，以及各层对应的功能"><a href="#各层名称、层次之间的关系，以及各层对应的功能" class="headerlink" title="各层名称、层次之间的关系，以及各层对应的功能"></a>各层名称、层次之间的关系，以及各层对应的功能</h4><p><strong>TCP/IP模型</strong></p><p>应用层：HTTP、SMTP、FTP….. （报文）</p><p>运输层：TCP、UDP （报文段）</p><p>网络层：IP （数据报）</p><p>链路层 （帧）</p><p>物理层</p><p><strong>OSI模型</strong></p><p>应用层、表示层、会话层、运输层、网络层、链路层、物理层</p><h4 id="两种不同模型的层次之间的对应关系"><a href="#两种不同模型的层次之间的对应关系" class="headerlink" title="两种不同模型的层次之间的对应关系"></a>两种不同模型的层次之间的对应关系</h4><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210618205745731.png" alt="image-20210618205745731"></p><h2 id="网络性能分析"><a href="#网络性能分析" class="headerlink" title="网络性能分析"></a>网络性能分析</h2><h3 id="指标：网络时延、丢包、吞吐量概念"><a href="#指标：网络时延、丢包、吞吐量概念" class="headerlink" title="指标：网络时延、丢包、吞吐量概念"></a>指标：网络时延、丢包、吞吐量概念</h3><h4 id="排队时延和丢包"><a href="#排队时延和丢包" class="headerlink" title="排队时延和丢包"></a>排队时延和丢包</h4><p>令$a$表示分组到达队列的平均速率（分组/s，pkt/s），所有分组都是由$L$比特组成的，比率$\dfrac{La}{R}$被称为流量强度（traffic intensity）。要求$La / R$小于1。</p><h4 id="端到端时延"><a href="#端到端时延" class="headerlink" title="端到端时延"></a>端到端时延</h4><p>假设该网络此时是无拥塞的（因此排队时延就可以看作是微不足道的）</p><p>假定在源主机和目的主机之间有$N-1$台路由器。</p><p>$d_{end-end} = N (d_{proc} + d_{trans} + d_{prop})$</p><ul><li>traceroute：发送了3*N个分组</li><li>有意地延迟传输：端系统希望向共享媒体传输分组的端系统可以有意地延迟它的传输以与其他端系统共享媒体❓❓❓❓❓❓❓❓❓❓</li></ul><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>在任何时间的瞬时吞吐量（instantaneous throughput）是主机接收到一个文件的速率（bps）。如果文件由$F$比特组成，主机接收到所有比特用去$T$秒，则文件传送的平均吞吐量（average throughput）是$F / T$ bps。</p><ul><li>瓶颈链路</li></ul><h3 id="四种时延：处理、排队、传输、传播"><a href="#四种时延：处理、排队、传输、传播" class="headerlink" title="四种时延：处理、排队、传输、传播"></a>四种时延：处理、排队、传输、传播</h3><ul><li>节点处理时延</li><li>排队时延</li><li>传输时延（transmission delay）：传输到链路上，用L表示该分组的长度，用Rbps（即b/s）表示从路由器A到路由器B的链路传输速率，$\frac{L}{R}$<ul><li>例如，对于一条10Mbps的以太网链路，速率R=10Mbps；</li><li>这是将所有分组的比特推（传输）向链路所需要的时间</li><li>实际的传输时延通常在毫秒到微秒量级</li></ul></li><li>传播时延（propagation delay）：链路上的传播，d是路由器A和路由器B之间的距离，s是该链路的传播速率$\frac{d}{s}$</li><li>总结的话：处理，排队，传输（L/R，分组推向链路），传播（距离的函数，与链路传输速率无关）<strong>累加起来得到节点总时延。</strong></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层服务"><a href="#网络层服务" class="headerlink" title="网络层服务"></a>网络层服务</h2><h3 id="交换-路由，转发，建立连接（虚电路）"><a href="#交换-路由，转发，建立连接（虚电路）" class="headerlink" title="交换/路由，转发，建立连接（虚电路）"></a>交换/路由，转发，建立连接（虚电路）</h3><ul><li>交换/路由<ul><li>确定数据包从源到目的的路由(多个节点)</li><li>从源到目的的最短的路径</li><li>路由算法</li></ul></li><li>转发<ul><li>将数据包从输入移动到指定的输出，由交换(单节点)决定</li><li>错误解决，排队，调度</li></ul></li><li>建立连接（虚电路）<ul><li>在某些网络（比如ATM网络）中存在第三个重要的功能<ul><li>在数据报流动之前，两个终端主机和中间的路由器建立虚拟连接（<strong>routers是参加其中的</strong>）</li></ul></li></ul></li></ul><p><strong>连接服务方面，网络层vs传输层：</strong></p><ul><li>网络层：在两个host之间（在VCs下可能还会涉及其中参加的routers）</li><li>传输层：在两个进程之间</li></ul><h3 id="网路服务模型（network-service-model）"><a href="#网路服务模型（network-service-model）" class="headerlink" title="网路服务模型（network service model）"></a>网路服务模型（network service model）</h3><p>其定义了分组在发送与接收端系统之间的端到端运输特性。</p><p>从主机角度被称为Qos(Quality of Service ，服务质量)。</p><ul><li>独立的一个分组<ul><li>确保交付</li><li>具有时延上限的确保交付</li></ul></li><li>分组流<ul><li>有序的分组交付</li><li>确保最小带宽</li><li>对于包中内容的修改限制</li></ul></li></ul><h4 id="Example：ATM的网络服务模型"><a href="#Example：ATM的网络服务模型" class="headerlink" title="Example：ATM的网络服务模型"></a>Example：ATM的网络服务模型</h4><ul><li><p>恒定比特率（Constant Bit Rate， CBR）</p></li><li><p>可变比特率（Variable Bit Rate ，VBR）</p></li><li><p>可用比特率（Available Bit Rate，ABR）</p></li><li><p>未指定比特率（Unspecified Bit Rate，UBR）</p></li></ul><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621224529790.png" alt="image-20210621224529790"></p><p>因特网的网络层提供了单一服务：尽力而为服务（best-offort service）</p><h4 id="路由器的性能度量"><a href="#路由器的性能度量" class="headerlink" title="路由器的性能度量"></a>路由器的性能度量</h4><p>$Router\ capacity= N * R$</p><p>$N$表示的是外部路由器“端口”的个数</p><p>$R$表示的是一个端口的速度（”线性速率”）</p><h4 id="路由器内部的结构"><a href="#路由器内部的结构" class="headerlink" title="路由器内部的结构"></a>路由器内部的结构</h4><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621225326256.png" alt="image-20210621225326256"></p><p>上层是负责数据的转发，用硬件实现；</p><p>下层是路由选择处理器，用于路由，管理，控制计算转发表，由硬件+软件的实现。</p><h5 id="输入端口的功能"><a href="#输入端口的功能" class="headerlink" title="输入端口的功能"></a>输入端口的功能</h5><ul><li>输入端口：它要执行将一条输入的物理链路与路由器相连接的物理层功能；<img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621230226764.png" alt="image-20210621230226764"><ul><li>Tasks:<ul><li>接受到来的包</li><li>更新IP包头<ul><li>TTL、CheckSum、Option和Fragment（maybe）</li></ul></li><li>寻找目的ip地址所对应的输出端口</li><li><strong>Queuing</strong></li></ul></li></ul></li></ul><h4 id="Looking-up-the-output-port"><a href="#Looking-up-the-output-port" class="headerlink" title="Looking up the output port"></a>Looking up the output port</h4><p>最长前缀匹配规则：在查找转发表项时，使用与目的地址匹配的最长地址前缀</p><p>更有效率的寻找匹配：<strong>树结构</strong></p><p>记录最后一次匹配的结果为最终结果（树的最底下）；采用硬件实现</p><h5 id="输出端口的功能"><a href="#输出端口的功能" class="headerlink" title="输出端口的功能"></a>输出端口的功能</h5><ol><li>分类：决定包到哪一个端口去；可以根据头部的内容，如包的协议，类型，地址等<ol><li>Source/destination IP address (32 bits) 源/目的 ip地址</li><li>Source/destination TCP port number (16 bits) TCP端口</li><li>Type of service (TOS) byte (8 bits) 服务类型</li><li>Type of protocol (8 bits)服务的协议</li></ol></li><li>缓冲区处理：决定什么时候和哪个包丢弃</li><li>调度：决定什么时候，哪个包去传输<ul><li>在排队中的中拿出一个包用来传输</li><li>当缓冲区满了时候选择包丢弃</li></ul></li></ol><p>可能的调度方式：优先级（非高中低优先级调度）、FQ（Fair queuing 轮询不同大小的包）、WFQ（有了权重）</p><h5 id="路由器的内部的交换结构"><a href="#路由器的内部的交换结构" class="headerlink" title="路由器的内部的交换结构"></a>路由器的内部的交换结构</h5><ul><li>共享内存，但是受限于内存的访问速度</li><li>总线，但是受限于总线的带宽</li><li>通过一个crossbar的网络结构，速度</li></ul><h4 id="虚拟电路和数据报网络"><a href="#虚拟电路和数据报网络" class="headerlink" title="虚拟电路和数据报网络"></a>虚拟电路和数据报网络</h4><h5 id="虚电路-1"><a href="#虚电路-1" class="headerlink" title="虚电路"></a>虚电路</h5><p>概述：电路交换 &amp; 分组交换</p><ul><li>电路交换<ul><li>为“call”预留的端到端的资源<ul><li>链路带宽、交换机的容量</li></ul></li><li>专用资源：不共享</li><li>保证的性能</li><li>如果需要的话就设置/清楚</li></ul></li><li>分组交换<ul><li>每个端到端的数据流被分成一个个分组了</li><li>应用A，B共享网络资源</li><li>存储并转发：分组一个时间段移动到一个跳，并在交换机存储（排队）</li><li>资源争用：聚合的（突发的）资源需求可能会超过可用的数量</li><li>拥塞：分组排序并等待链路使用</li></ul></li></ul><p>虚电路和数据报网络</p><p>两种类型的分组交换网络</p><ul><li>虚拟电路网络<ul><li>提供给包流的网络服务</li><li>VC网络提供面向网络层连接的服务</li><li>ATM</li></ul></li><li>数据报网络<ul><li>提供给单独的包的网络服务</li><li>数据报网络提供网络层无连接服务</li><li>IP 网络</li></ul></li></ul><h5 id="如何建立虚电路连接"><a href="#如何建立虚电路连接" class="headerlink" title="如何建立虚电路连接"></a>如何建立虚电路连接</h5><p>每一个包都携带一个VC识别码（不是目的host的地址）</p><p>在源-目的的路径上的每个路由器维持“状态”，为每一个经过的连接</p><p>链路，路由资源（带宽，缓冲）都为每个VC所预留</p><ul><li>专用资源=可预测的服务质量</li></ul><p>建立连接：两个终端主机和中间的交换机预先建立虚拟连接的路径；路由就是用来寻找一个适合（最短的）路径</p><p>VC的implementation</p><p>一个VC的组成如下：①源和目的主机之间的路径（即一系列链路和路由器）②VC号，沿着该路径的每段链路的一个号码③沿着该路径的每台路由器中的转发表表项</p><p><strong>注意：</strong></p><ul><li>属于VC的包都随着携带着VC号</li><li><font color="red"><strong>VC号在每一个链路中都是可以改变的</strong></font>，转发表中将会list新的VC号</li><li>因为一条虚电路在每条链路上可能会有不同的VC号，所以每台中间路由器必须用一个新的VC号来替代每个传输分组的VC号；而这个新的VC号是从转发表中获得的。</li></ul><p><strong>转发表如下：</strong></p><table><thead><tr><th>入接口</th><th>入VC号</th><th>出接口</th><th>出VC号</th></tr></thead></table><p>一个分组在沿着其路由在每条链路上不简单的保持相同的VC号的原因：</p><ul><li>第一，逐链路代替该号码减少了在分组首部中VC字段的长度</li><li><strong>第二，通过允许沿着该虚电路路径每条链路有一个不同的VC号，大大简化了虚电路的建立</strong></li></ul><p>如果沿着某路径的所有链路要求一个共同的VC号，那么路由器不得不交换并处理相当大量的报文，以约定共一个的VC号用于一次连接。</p><p>端系统向网络发送指示虚电路启动和终止的报文，以及路由器之间传递的用于建立虚电路的报文，他们被称为信令报文（signaling message），用来交换这些报文的协议被称为信令协议(signaling protocol)</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622004903815.png" alt="image-20210622004903815"></p><h5 id="数据报网络"><a href="#数据报网络" class="headerlink" title="数据报网络"></a>数据报网络</h5><ul><li>在网络层没有连接建立</li><li>交换机：没有有关“连接”的网络层的概念</li><li>因为数据报网络中的转发表能够在任何时刻进行修改，所以可能从一个端系统到另一个端系统，发送一系列的分组可能在通过网络时走不同的路径，并可能无序到达</li><li><strong>路由器使用最长前缀匹配规则</strong></li></ul><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622005447519.png" alt="image-20210622005447519"></p><h4 id="The-Internet-Network-layer"><a href="#The-Internet-Network-layer" class="headerlink" title="The Internet Network layer"></a>The Internet Network layer</h4><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622010202461.png" alt="image-20210622010202461"></p><p>因特网网络层的内部视图，有三个重要组件：①IP协议②路由选择协议③ICMP协议，即报告数据报中的差错和对某些网络层信息请求进行响应的设施。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><h3 id="IP基本原理"><a href="#IP基本原理" class="headerlink" title="IP基本原理"></a>IP基本原理</h3><p>包的生命周期：TTL</p><p>切⽚片重组、差错控制采⽤用ICMP包</p><p>流控：丢弃包+ICMP</p><h3 id="异构网络环境下，internet协议的工作过程"><a href="#异构网络环境下，internet协议的工作过程" class="headerlink" title="异构网络环境下，internet协议的工作过程"></a>异构网络环境下，internet协议的工作过程</h3><h2 id="协议-1"><a href="#协议-1" class="headerlink" title="协议"></a>协议</h2><h3 id="协议基本原语与相关参数"><a href="#协议基本原语与相关参数" class="headerlink" title="协议基本原语与相关参数"></a>协议基本原语与相关参数</h3><h3 id="IPv4首部格式（各字段含义和变化）"><a href="#IPv4首部格式（各字段含义和变化）" class="headerlink" title="IPv4首部格式（各字段含义和变化）"></a>IPv4首部格式（各字段含义和变化）</h3><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622011443036.png" alt="image-20210622011443036"></p><p><strong>IHL首部长度</strong>（4bits）：因为ipv4数据报可包含一些可变数量的选项（这些选项包含在Ipv4数据报首部中），故需要用这4比特来确定IP数据报从哪里开始的；大多数IP数据报是不包含选项的，所以一般的IP数据报具有20字节的首部。</p><p><strong>Type of Service</strong>（8bits）：3bit优先级；1bit可靠性；1bit延迟；1bit吞吐量；</p><p><strong>Total length</strong>（16 bits）</p><p><strong>Identification</strong>(16 bits)</p><p><strong>Options</strong>(variable ≤40 octets)</p><p><strong>Padding</strong>(variable)</p><ul><li>To fill to multiple of 32 bitslong</li></ul><p><strong>Max length of datagram (header + data) 65,535 octets</strong></p><h4 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h4><p>由于每个链路路有MTU（Maximum Transmission Unit 最大传送单元），而包的大小超过MTU，从而需要将其切分。在网络层的切分给个小片段需要加上IP包头，然后在送往上层协议的时候需要组装。</p><p>如何重新组装：需要识别码来识别是哪个包；需要序列列号以防丢包；需要最大序列列号保证直到结束</p><p>这里利用IP包里的flag表征moreflag；1为还有包，0为没包了，即为最后一个包；</p><p>注意len通常是8字节的倍数</p><p>接受端开足够的buffer来组装包。</p><p>这反映了除了最后一片的所有初始有效载荷数据的数量应当是8字节的倍数，并且偏移量应当被规定以8字节块为单位。</p><h3 id="IP地址的分类法"><a href="#IP地址的分类法" class="headerlink" title="IP地址的分类法"></a>IP地址的分类法</h3><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p>对于一个主机/路由的每一个物理端口都需要一个额外的地址便于路由</p><h3 id="A、B、C、D类划分标准和地址范围"><a href="#A、B、C、D类划分标准和地址范围" class="headerlink" title="A、B、C、D类划分标准和地址范围"></a>A、B、C、D类划分标准和地址范围</h3><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622134154859.png" alt="image-20210622134154859" style="zoom:67%;"><h4 id="Class-A"><a href="#Class-A" class="headerlink" title="Class A"></a>Class A</h4><p>首位为0，支持$2^7-2=126$个网段；每个网段支持的主机数为$2^{24}-2$个（全0和全1的地址需要扣除，全0是网络号，全1是广播号）</p><p>从1.x.x.x 到 126.x.x.x</p><p><strong>127.*.*.*: 回环测试，用于测试本地网卡。127.0.0.1 “localhost”</strong></p><h4 id="Class-B"><a href="#Class-B" class="headerlink" title="Class B"></a>Class B</h4><p>首位为10，从128.0.x.x到191.255.x.x</p><p>支持$2^{14}$个B类网段；每个网段支持有$2^{16}-2$个主机</p><h4 id="Class-C"><a href="#Class-C" class="headerlink" title="Class C"></a>Class C</h4><p>首位为110，从192.0.0.x到223.255.255.x</p><p>有$2^{21}$个不同的网段，每个网段有$2^8-2$个主机</p><h4 id="Class-D"><a href="#Class-D" class="headerlink" title="Class D"></a>Class D</h4><p>用于多播</p><h2 id="子网划分-聚集"><a href="#子网划分-聚集" class="headerlink" title="子网划分/聚集"></a>子网划分/聚集</h2><p>为了确定子网，分开主机和路由器的每个接口，产生几个隔离的网络岛，使用接口端接这些隔离的网络的端点，这些隔离的网络中的每一个都叫做一个子网。</p><p>子网划分可以通过子网掩码一级一级划分</p><h2 id="CIDR表达（如12-253-96-0-18）"><a href="#CIDR表达（如12-253-96-0-18）" class="headerlink" title="CIDR表达（如12.253.96.0/18）"></a>CIDR表达（如12.253.96.0/18）</h2><p>classless Interdomain Routing ，无类别域间路由选择</p><p>一个IP地址可以被看作是“A.B.C.D/n”，n最高比特构成了IP地址的网络部分，并且经常被称为该地址的<strong>前缀（网络前缀）</strong>。</p><h2 id="IPv6，和IPv4的异同，优缺点"><a href="#IPv6，和IPv4的异同，优缺点" class="headerlink" title="IPv6，和IPv4的异同，优缺点"></a>IPv6，和IPv4的异同，优缺点</h2><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622153329533.png" alt="image-20210622153329533"></p><p>流量类型（8bits）：包的类or优先级；</p><p>Flow Label（20bits）（识别同一“流”中的数据报）</p><p>负载长度：给出了IPv6数据报中跟在定长的40字节数据报首部的字节数量</p><p><strong>注意：</strong></p><p>IPv6不允许在中间的路由器上进行分片和重新组装，这种操作只能在源与目的地上执行；</p><p>如果路由器收到的IPv6数据报因太大而不能转发到出链路，那么就只需丢掉数据报，发ICMP差错报文</p><p>IPv6没有广播</p><p>IPv6没有ARP，采用多播和ICMPv6作为“邻居发现”</p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622154443074.png" alt="image-20210622154443074" style="zoom: 25%;"><h2 id="NAT原理及优缺点"><a href="#NAT原理及优缺点" class="headerlink" title="NAT原理及优缺点"></a>NAT原理及优缺点</h2><p>NAT也就是网络地址转换</p><p>其允许内部和外部流量采用不同的IP地址。地址的转换发生在对外的接口。</p><p>利用一个NAT转换表实现</p><p><strong>目的</strong>：</p><ul><li>作为一个防火墙，隐藏内部的IP地址</li><li>允许一个企业（组织）使用更多的内部的IP地址</li><li>隔离（组织/ISCP）的改变</li></ul><p><strong>缺点：</strong></p><ul><li>备受争议<ul><li>端口号是用于进程编址的，而不是用于主机编制</li><li>路由器通常仅应当处理高达第三层的分组</li><li>NAT协议违反了端到端原则（主机彼此应当相互直接对话，结点不应介入修改IP地址和端口号）</li><li>应当使用IPV6来解决IP地址短缺的问题，不应当使用NAT</li></ul></li><li>妨碍了P2P应用程序<ul><li>需要用Skype</li><li><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622150055012.png" alt="image-20210622150055012"></li></ul></li></ul><p>三种类型的NAT</p><ul><li>静态NAT<ul><li>私有地址映射到一个保留的公共IP地址。</li><li>通常用于内联网的服务器主机</li></ul></li><li>动态NAT<ul><li>NAT路由器保留一个注册IP地址池，按需分配给私人ip地址</li><li>通常用于内联网的个人客户端PC。</li></ul></li><li>单一地址<ul><li>NAPT（网络地址端口转换：将运输层端口号以及IP地址同时做转换）</li></ul></li></ul><h2 id="ARP地址解析原理和流程"><a href="#ARP地址解析原理和流程" class="headerlink" title="ARP地址解析原理和流程"></a>ARP地址解析原理和流程</h2><h2 id="DHCP动态地址获取的过程"><a href="#DHCP动态地址获取的过程" class="headerlink" title="DHCP动态地址获取的过程"></a>DHCP动态地址获取的过程</h2><p>DHCP是一个客户-服务器协议。客户端通常是新达到的主机，它要获得包括自身使用的IP地址在内的网络配置信息。</p><p>对于一个新到达的主机而言，DHCP是一个4步骤的过程：</p><ol><li>DHCP服务器发现；（源地址0.0.0.0，广播目的地址255.255.255.255）</li><li>DHCP服务器提供；（DHCP提供报文，仍然使用IP广播地址255.255.255.255，因为在子网中可能有多个DHCP服务器，该客户也许会发现它处于能在几个提供者之间进行选择的优越位置。）</li><li>DHCP请求；（新到达的客户从一个或多个服务器中选择一个，并向其提供用一个DHCP请求报文）</li><li>DHCP ACK；（服务器用DHCP ACK报文返回确认其要求参数）</li></ol><h2 id="ICMP：用于发送出错信息"><a href="#ICMP：用于发送出错信息" class="headerlink" title="ICMP：用于发送出错信息"></a>ICMP：用于发送出错信息</h2><h2 id="Ping和traceroute的实现原理"><a href="#Ping和traceroute的实现原理" class="headerlink" title="Ping和traceroute的实现原理"></a>Ping和traceroute的实现原理</h2><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p>用于测试可到达性的</p><p>源通过向远程的主机或路由器发送一个echo request，然后如果远程的系统接收到了ICMP包，那么它就会向源返回发送一个echo reply</p><p>当然ping可以做的更好</p><ul><li>计算过程的时间</li><li>通过利用TTL来数跳数</li></ul><h3 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h3><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622151323418.png" alt="image-20210622151323418" style="zoom: 50%;"><p>为了判断源和目的地之间的所有路由器的名字和地址，源主机中的Traceroute向目的主机发送一系列普通的IP数据报。这些数据报的每个携带了具有一个不可达UDP端口号的UDP报文段；第一个数据报的TTL为1，以此类推</p><p>该源主机也为每个数据报启动定时器，当第n个数据报到达第n个路由器，第n台路由器观察到TTL过期了，根据IP协议规则，路由器丢弃该数据报并发送一个ICMP警告给源主机（包含了路由器的名字和其IP地址）</p><p>何时停止发送呢UDP？端口不可达的ICMP报文就停止。</p><p>标准的Traceroute程序实际上用相同的TTL发送3个一组的分组；因此Traceroute输出对于每个TTL提供了3个结果。</p><h3 id="Path-MTU"><a href="#Path-MTU" class="headerlink" title="Path MTU"></a>Path MTU</h3><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210622151951089.png" alt="image-20210622151951089" style="zoom:50%;"><p>首先发大包，如果参数错误则相应的减小包的大小，直到能够成功到达目的地。</p><h2 id="IP组播（Multicast）"><a href="#IP组播（Multicast）" class="headerlink" title="IP组播（Multicast）"></a>IP组播（Multicast）</h2><h3 id="组播地址、组播模型、组播组管理：IGMP"><a href="#组播地址、组播模型、组播组管理：IGMP" class="headerlink" title="组播地址、组播模型、组播组管理：IGMP"></a>组播地址、组播模型、组播组管理：IGMP</h3><h3 id="组播路由机制"><a href="#组播路由机制" class="headerlink" title="组播路由机制"></a>组播路由机制</h3><h3 id="Shared-tree-Source-based-tree"><a href="#Shared-tree-Source-based-tree" class="headerlink" title="Shared-tree,Source-based tree"></a>Shared-tree,Source-based tree</h3><h1 id="Network-Security"><a href="#Network-Security" class="headerlink" title="Network Security"></a>Network Security</h1><h2 id="被动攻击和主动攻击的概念"><a href="#被动攻击和主动攻击的概念" class="headerlink" title="被动攻击和主动攻击的概念"></a>被动攻击和主动攻击的概念</h2><h3 id="Passive-Attacks"><a href="#Passive-Attacks" class="headerlink" title="Passive Attacks"></a>Passive Attacks</h3><ul><li><strong>传输中窃听</strong><ul><li>信息内容的泄露</li></ul></li><li><strong>流量分析</strong><ul><li>通过监控一对主机的沟通信息的频率和长度</li><li>正常沟通的信息可以被猜测到</li></ul></li><li><strong>很难被察觉，但是可以被避免</strong></li></ul><h3 id="Active-Attacks"><a href="#Active-Attacks" class="headerlink" title="Active Attacks"></a>Active Attacks</h3><ul><li><strong>伪装</strong><ul><li>假装自己是另外一个人</li></ul></li><li><strong>重放</strong><ul><li>截获然后重传</li></ul></li><li><strong>修改</strong> （对于信息内容）</li><li><strong>拒绝服务</strong></li><li><strong>很难去避免，但是可以被检测到</strong></li></ul><h2 id="Security-Requirements"><a href="#Security-Requirements" class="headerlink" title="Security Requirements"></a>Security Requirements</h2><ul><li>可用性（availability）</li><li>保密性（Confidentiality）</li><li>完整性（Integrity）</li><li>真实性（Authenticity）</li></ul><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621144745203.png" alt="image-20210621144745203"></p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>双方共享相同的（对称的）密钥：$K_{A-B}$</p><h3 id="加密机制的组成元素"><a href="#加密机制的组成元素" class="headerlink" title="加密机制的组成元素"></a>加密机制的组成元素</h3><ul><li>加密（Encryption）：信息不可能被理解</li><li>消息验证码（Message Authentication Code , MAC）：信息不能被改动</li><li>签名（Sign）：来源不能被伪造</li></ul><h3 id="对加密机制的要求-Requirements-for-Encryption"><a href="#对加密机制的要求-Requirements-for-Encryption" class="headerlink" title="对加密机制的要求(Requirements for Encryption)"></a>对加密机制的要求(Requirements for Encryption)</h3><ul><li>强大的加密算法</li><li>发送方和接收方必须安全地获得密钥 - 密钥分配</li></ul><h4 id="Attacking-Encryption"><a href="#Attacking-Encryption" class="headerlink" title="Attacking Encryption"></a>Attacking Encryption</h4><p>当考虑Trudy破解Bob和Alice之间加密方案的难易程度的时候，可以根据入侵者所拥有的信息区分三种不同的情况</p><ul><li>唯密文攻击</li><li>已知明文攻击（当入侵者知道（明文，密文）的一些匹配时）</li><li>选择明文攻击（入侵者能够选择某一明文报文并得到该明文报文所对应的密文形式）</li></ul><h3 id="常见加密算法（一般了解）"><a href="#常见加密算法（一般了解）" class="headerlink" title="常见加密算法（一般了解）"></a>常见加密算法（一般了解）</h3><h4 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h4><ul><li>替代的方法<ul><li>字母表中的字母被其他字母/数字/符号代替</li><li>凯撒密码（Caesar Cipher）<ul><li>【字母表的循环移动】</li><li>Attack：easy（最多只有26种可能）</li></ul></li><li>Mono-alphabetic密码<ul><li>【一个映射（单表密码）】共有$N! = 26! = 2^{88}$可能的keys</li><li>Attack：<ul><li>字母(在足够长的文本中)在语言中出现的频率是确定的</li><li>固定的替换</li><li>使用字母、单词和字母对的出现频率可以很容易地获得密钥</li></ul></li></ul></li><li>维吉内·密码（Vigenere Cipher）<ul><li>例子：<img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621154253991.png" alt="image-20210621154253991"></li><li>【一个keyword（用cycle的方法）去选择对应的字母】</li><li>Attack：<ul><li>算出钥匙的长度</li><li>独立破解每一个可疑的Mono-Alphabetic Ciphers</li></ul></li></ul></li></ul></li><li>换位(置换)方法<ul><li>重新排列(打乱)输入，而不改变实际使用的字母</li><li>篱笆密码（Rail Fence Cipher）<ul><li>【明文被写成一个对角线序列，密文则逐行读取】</li><li>Attack：<ul><li>easy，只要按照行摆列就行</li></ul></li></ul></li><li>Row-Column密码（行列密码）<ul><li>【明文写成一个长方形，密文是从矩形中逐列读取的，列顺序对应键的字母顺序】</li></ul></li></ul></li></ul><h4 id="现代算法（块加密）"><a href="#现代算法（块加密）" class="headerlink" title="现代算法（块加密）"></a>现代算法（块加密）</h4><ul><li>处理固定块大小的明文，然后产生相同大小的密文块</li><li>常用的算法<ul><li>DES(Data Encryption Standard， 数据加密标准)<ul><li>DES使用的是具有56比特密钥的64比特块</li><li><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621160853760.png" alt="image-20210621160853760" style="zoom: 50%;"></li><li>Attack DES：<ul><li>穷举攻击的次数<ul><li>搜索空间$O(2^{56})=O(10^{17})$个密钥</li><li>无后门存在</li></ul></li><li>现在是可以被攻破的</li></ul></li></ul></li><li>3DES<ul><li>3 个key 、3次执行次数</li><li>Problem：<ul><li>太慢了，block size(64bits)太小了</li><li></li></ul></li></ul></li><li>AES(Advanced Encryption Standard，高级加密标准)<ul><li><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621161708281.png" alt="image-20210621161708281" style="zoom:50%;"></li></ul></li></ul></li></ul><h2 id="非对称加密算法：RSA算法（重点）"><a href="#非对称加密算法：RSA算法（重点）" class="headerlink" title="非对称加密算法：RSA算法（重点）"></a>非对称加密算法：RSA算法<font color="red">（重点）</font></h2><h3 id="密钥生成过程"><a href="#密钥生成过程" class="headerlink" title="密钥生成过程"></a>密钥生成过程</h3><p>生成RSA的公钥和私钥：</p><ol><li>选择两个大素数$p$和$q$</li><li>计算$n=pq$和$z=(p-1)(q-1)$</li><li>选择一个小于$n$的一个数$e$，且使得$e$和$z$没有（非1的）公因数（这时称$e$和$z$互素）$e$是用来加密的</li><li>求一个数$d$使得$ed-1$可以被$z$整除。$d$是用来解密的</li></ol><p>$K_B^{+}$公钥：$(n,e)$</p><p>$K_B^{-}$私钥：$(n,d)$</p><h3 id="RSA加密和解密计算过程"><a href="#RSA加密和解密计算过程" class="headerlink" title="RSA加密和解密计算过程"></a>RSA加密和解密计算过程</h3><p>A要给B发送一个由整数$m$表示的比特组合，且$m&lt;n$。为了进行编码，A执行指数运算$m^e$，然后计算明文报文得到的密文<br>$$<br>c=m^e mod\ n<br>$$<br>对应$c$的比特模式发送给B</p><p>然后B用其密钥进行解密<br>$$<br>m=c^d mod\ n<br>$$<br>得到的$m$就是结果</p><h2 id="报文鉴别与散列函数"><a href="#报文鉴别与散列函数" class="headerlink" title="报文鉴别与散列函数"></a>报文鉴别与散列函数</h2><h3 id="报文鉴别的可能方式和要求"><a href="#报文鉴别的可能方式和要求" class="headerlink" title="报文鉴别的可能方式和要求"></a>报文鉴别的可能方式和要求</h3><blockquote><p><strong>报文完整性</strong>也称为报文鉴别</p><p>报文鉴别（B希望A向B证明她的身份）</p><p>ap（authenticationg protocol）有几个版本的（具体见P461和CH5-Network Security -2）</p><p>ap4.0:利用一个不重数（nonce：number (R) used only once-in-a-lifetime）</p><p>为了证明A是活的，B向A发送不重数R，A必须返回一个用共享密钥加密的R</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621170144472.png" alt="image-20210621170144472"></p><p>ap5.0</p><p>同样使用不重数</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621170241153.png" alt="image-20210621170241153"></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621170502953.png" alt="image-20210621170502953"></p><p><strong>difficult to detect</strong>:</p><ul><li>Bob receives everything that Alice sends, and vice versa. (e.g., so Bob, Alice can meet one week later and recall conversation!)</li><li>problem is that Trudy receives all messages as well!</li></ul></blockquote><h4 id="报文鉴别码（Message-Authentication-Code，MAC）"><a href="#报文鉴别码（Message-Authentication-Code，MAC）" class="headerlink" title="报文鉴别码（Message Authentication Code，MAC）"></a>报文鉴别码（Message Authentication Code，MAC）</h4><p>为了执行报文完整性，除了使用密码散列函数，A和B将需要共享秘密s；这个共享的秘密不过是一个比特串，它被称为鉴别密钥（authentication key），通过使用这个共享秘密，报文完整性能够执行如下：</p><p>1）A生成报文m，用s级联m以生成m+s，并计算散列H(m+s)（例如SHA-1）,这个H(m+s)就被称为MAC</p><p>2）A将MAC附加到报文m上，生成扩展报文(m，H(m+s))，将此扩展报文发送给B</p><p>3）B接受到(m,h)，由于知道s，所以计算处报文鉴别码H(m+s)，如果其与h相同，则一切正常</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621201427054.png" alt="image-20210621201427054"></p><h2 id="公钥系统"><a href="#公钥系统" class="headerlink" title="公钥系统"></a>公钥系统</h2><h3 id="公钥加密机制的组成元素"><a href="#公钥加密机制的组成元素" class="headerlink" title="公钥加密机制的组成元素"></a>公钥加密机制的组成元素</h3><p>明文：这是输入到算法中的可读消息或数据。加密算法：加密算法对明文执行各种转换。公钥和私钥：这是一对已选定的密钥，如果其中一个用于加密，另一个用于解密。加密算法执行的确切转换取决于作为输入提供的公钥或私钥。密文：这是作为输出产生的加扰消息。这取决于明文和密钥。对于给定的消息，两个不同的密钥将产生两个不同的密文。解密算法：该算法接受密文和匹配密钥，生成原始明文。</p><h3 id="加密和数字签名"><a href="#加密和数字签名" class="headerlink" title="加密和数字签名"></a>加密和数字签名</h3><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621202219525.png" alt="image-20210621202219525"></p><p>假设A有m和$K_B^{-}(m)$，则需要证明B确实签署过这个文档，那么就：</p><p>A持有B的公钥$K_{B}^{+}$，并把它用于B的数字签名$K_B^{-}(m)$上如果得到了m，那就可以证明只有B能够签署这个文档。</p><p>基于如下的理由：</p><ul><li>无论是谁签署了这个报文，都必定在计算签名$K_B^{-}(m)$的时候利用了B的私钥；</li><li>知道$K_B^{-}$的只有B一个人，又因为公钥无助于得到私钥的信息</li></ul><p><strong>但是，因为加密和解密的代价都比较高，所以使用一个多对一散列函数来计算生成该报文的一个固定长度的数据“指纹”，表示为H(m)</strong></p><h3 id="以下Key-Distribution"><a href="#以下Key-Distribution" class="headerlink" title="以下Key Distribution"></a>以下Key Distribution</h3><h3 id="Diffie-Hellman-密钥交换过程"><a href="#Diffie-Hellman-密钥交换过程" class="headerlink" title="Diffie-Hellman 密钥交换过程"></a>Diffie-Hellman 密钥交换过程</h3><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621204406791.png" alt="image-20210621204406791"></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621204429665.png" alt="image-20210621204429665"></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621204501535.png" alt="image-20210621204501535"></p><h3 id="数字证书的概念和构造，CA"><a href="#数字证书的概念和构造，CA" class="headerlink" title="数字证书的概念和构造，CA"></a>数字证书的概念和构造，CA</h3><p><strong>通过CA密钥分发</strong></p><ul><li>Session Key<ul><li>Used for duration of one logical connection</li><li>Destroyed at end of session</li></ul></li><li>Permanent key<ul><li>Used for distribution of keys</li></ul></li><li>CA</li></ul><p>数字签名的一个重要作用是公钥认证（证实一个公钥是属于某个特定的实体）</p><p>从书上的例子可以看出，要使公钥密码有用，需要能够证实你具有的公钥实际上就是与你要进行通信的实体的公钥，</p><p>将公钥与特定实体绑定通常是由认证中心（certification Authority，CA）完成的，CA的职责就是使识别和发行证书合法化。</p><p>CA具有以下作用：</p><ul><li>CA证实一个实体（一个人、一台路由器）的真实身份，</li><li>一旦CA验证了某个实体的身份，这个CA就会生成一个把其身份和实体的公钥绑定起来的证书（certificate）<ul><li>这个证书包含了这个公钥和公钥所有者全局唯一的身份标识信息</li></ul></li></ul><p>使用方法：</p><p>当B发下订单的同时，他也发送过来其CA签署的证书；A然后使用CA的公钥来核对B的证书的合法性并同时提取B的公钥</p><p><strong>Public Key Certificate</strong></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621204001731.png" alt="image-20210621204001731"></p><h3 id="安全电子邮件系统设计"><a href="#安全电子邮件系统设计" class="headerlink" title="安全电子邮件系统设计"></a>安全电子邮件系统设计</h3><p>利用会话密钥</p><p>①A选择一个随机对称会话密钥$K_S$②用这个对称密钥加密她的报文$m$，③用B的公钥加密这个对称密钥④级联该加密的报文和加密的对称密钥形成一个包；⑤然后向B的电子邮件发送这个包；</p><p>B收到后：①他使用其私钥得到对称密钥，这样就可以解读$m$了。</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621205145437.png" alt="image-20210621205145437"></p><p>提供了机密性的安全电子邮件系统后，设计另一个可以提供发送方鉴别和报文完整性的系统；</p><p>使用数字签名和报文摘要：</p><p>①A对于m使用一个散列函数，然后得到一个报文摘要，②用这个私钥对这个结构进行签名，得到一个数字签名③把初始报文（未加密）和该数字签名级联起来生成一个包；④发送</p><p>B收到这个包后：①将A的公钥用于这个被签名的报文，②该操作得到的结果与最后得到的H散列结构相比较</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621205609529.png" alt="image-20210621205609529"></p><p><strong>全部整合起来！！</strong></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210621205640132.png" alt="image-20210621205640132"></p><h1 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h1><h3 id="链路层服务：分帧，媒介访问控制"><a href="#链路层服务：分帧，媒介访问控制" class="headerlink" title="链路层服务：分帧，媒介访问控制"></a>链路层服务：分帧，媒介访问控制</h3><h5 id="链路层概述"><a href="#链路层概述" class="headerlink" title="链路层概述"></a>链路层概述</h5><ul><li><p>运行链路层协议的任何设备均称为<strong>结点</strong>（node）[结点包括主机、路由器、交换机和wifi接入点]</p></li><li><p>我们也把沿着通信路径连接相邻结点的通信信道称为<strong>链路</strong>（link）</p></li><li><p>在通过特定的链路时，传输结点将数据报封装在<strong>链路层帧</strong>中，并将该帧传送到链路中。</p><ul><li>链路层交换机没有与它们的接口相关联的MAC地址</li><li>MAC地址6字节，48位，全一为广播</li><li>ARP将IP地址解析为MAC地址</li><li>寻找IP对应的MAC地址：构造ARP分组，询问子网上所有其他主机和路由器，确定对于要解析的IP地址的MAC地址。查询是广播帧，响应报文是标准帧</li><li>跨子网先发给网关路由器，询问地址也是网关的MAC地址，到达网关，网关再找到目的地MAC地址。</li></ul></li></ul><h5 id="链路层在何处实现"><a href="#链路层在何处实现" class="headerlink" title="链路层在何处实现"></a>链路层在何处实现</h5><p>链路层的主体部分就是在<strong>网络适配器</strong>（network adapter）[<strong>网络接口卡</strong>(Network Interface Card，NIC)]中实现的。位于网络适配器核心的是链路层控制器，该控制器通常是一个实现了许多链路层服务的专用芯片</p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210619143421477.png" alt="image-20210619143421477" style="zoom:50%;"><p>上图表示尽管大部分的链路层是在硬件中实现的；但是还有部分的链路层是在运行于主机CPU上面的软件中实现的。（链路层的软件组件实现了高层链路层的功能）</p><p><strong>所以，链路层是硬件和软件的结合体，即此处是协议栈中软件和硬件交接的地方。</strong></p><h4 id="链路层提供的服务"><a href="#链路层提供的服务" class="headerlink" title="链路层提供的服务"></a>链路层提供的服务</h4><ul><li>成帧（Framing）：网络层的数据报经链路传输之前，都需要用链路层帧封装起来，帧的结构由链路层协议规定。一个帧由一个数据字段和若干首部字段组成。</li><li>链路接入（Link access）：媒体访问控制（Medium Access Control ,MAC）协议规定了帧在链路上传输的规则。<strong>MAC协议用于协调多个结点的帧传输</strong><ul><li>两种类型的”links”<ul><li>Point-to-Point：由链路一端的单个发送方和链路另一端的单个接收方组成.</li><li>Broadcast：多个发送方和接受方连接到相同的, 单一的, 共享的广播信道上.</li></ul></li><li>MAC<ul><li>Context:在一个共享的广播信道<ul><li>必须避免多个节点同时通话</li><li>否则，冲突会导致数据混乱</li></ul></li><li>多路访问协议（Multiple access protocol）<ul><li>信道划分协议（channel partitioning protocol）</li><li>随机接入协议（random access protocol）</li><li>轮流协议（taking-turns protocol）</li></ul></li></ul></li></ul></li><li>可靠交付（Reliable delivery over the link）：<ul><li>保证无差错地经链路层移动每一个网络层数据报，链路层的可靠交付服务通常通过确认和重传获得的（参考3.4）</li><li>链路层可靠交付服务通常用于易于产生高差错率的链路（例如无线链路）其目的是本地（在差错发生的链路上）纠正一个差错</li><li>对于低比特差错的链路，包括光纤、同轴电缆，链路层可靠交付可能会被认为是一种不必要的开销（许多有线的链路层协议不再提供可靠交付服务）</li><li>流控（Flow control）：Pacing between adjacent sending and receiving nodes</li></ul></li><li>差错检测和纠正（Error detection and correction）：通过让发送结点在帧中包括差错检测比特，让接受结点进行差错检查。(运输层和网络层提供了因特网检验和: 有限形式的差错检测)。链路层差错检测通常更复杂并且用硬件实现。</li></ul><h4 id="多路访问协议"><a href="#多路访问协议" class="headerlink" title="多路访问协议"></a>多路访问协议</h4><p>我们所希望的是(对于速率 $R$ bps 的广播信道):</p><ol><li>当仅有一个结点有数据发送时, 该结点具有 bps 的吞吐量.</li><li>当有 $M$个结点要发送数据时, 每个节点(在适当的时间间隔内)吞吐量为 $R/M$ bps, 可以是平均传输速率.</li><li>协议是分散的, 不会因为某主结点故障导致整个系统崩溃.</li><li>协议是简单的, 实现不昂贵.</li></ol><h5 id="信道划分协议（Channel-partitioning）"><a href="#信道划分协议（Channel-partitioning）" class="headerlink" title="信道划分协议（Channel partitioning）"></a>信道划分协议（Channel partitioning）</h5><p>假设一个支持$N$个结点的信道，且信道的传输速率是$R$ bps。</p><p>时分多路复用(TDM), 频分多路复用(FDM): 用于在所有共享信道结点之间划分广播信道带宽的技术.</p><ul><li>TDM<ul><li>其消除了碰撞且非常公平：每个结点在每个帧时间内得到了专用的传输速率$R/N$ bps</li><li>缺陷:<ul><li>结点被限制速率$R/N$ bps , 即使只有一个结点要发送分组.</li><li>结点必须总是等待它在传输序列中的轮次, 轮到它了才可以发.</li></ul></li></ul></li><li>FDM<ul><li>将$R$bps的信道划分为不同的频段（每个频道具有$R/N$带宽）</li><li>也拥有TDM相同的优缺点（即限制一个结点只能使用$R/N$的带宽，即使当它是唯一一个由分组要发的结点时。）</li></ul></li><li>码分多址 (Code Division Multiple Access CDMA)<ul><li>CDMA 对每个节点分配一种不同的编码. 这会被用来对其发送的数据进行编码.</li><li>不同的结点能够同时传输, 并且它们各自相应的接收方仍能正常接收发送方编码的数据比特, 而不在乎其他结点的干扰传输.</li></ul></li></ul><h5 id="轮流协议（Taking-turns）"><a href="#轮流协议（Taking-turns）" class="headerlink" title="轮流协议（Taking turns）"></a>轮流协议（Taking turns）</h5><p>Nodes take turns, but nodes with more to send can take longer turns</p><h6 id="轮询协议（polling-protocol）"><a href="#轮询协议（polling-protocol）" class="headerlink" title="轮询协议（polling protocol）"></a>轮询协议（polling protocol）</h6><p>要求这些结点之一要被指定为主节点，主结点以循环的方式轮询（poll）每个结点，然后通过向这些结点发送一个报文，告诉其能够传输的帧的最多数量；</p><p>其消除了困扰随机接入协议的碰撞和空时隙，这使得轮询取得了高得多的效率。</p><p>缺陷：</p><ul><li>如果只有一个结点是活跃的，那么这个结点将以小于$R$bps的速率传输（因为轮询的时延）</li><li>如果主节点有故障，那么整个信道就变得不可操作</li></ul><h6 id="令牌传递协议（token-passing-protocol）"><a href="#令牌传递协议（token-passing-protocol）" class="headerlink" title="令牌传递协议（token-passing protocol）"></a>令牌传递协议（token-passing protocol）</h6><p>一个称为令牌的小的特殊帧 在结点之间以某种固定的次序进行交换.</p><p>当一个结点收到令牌时，当且仅当它有一些帧要发送的时候，它才持有这个令牌；否则它立即向下一个结点转发该令牌；</p><p>当一个结点收到令牌时候，如果它确实有帧要传输，它发送最大数目的帧数，然后把令牌转发给下一个结点。</p><p>令牌传递是分散的，并有很高的效率</p><p>问题</p><ul><li><p>一个结点的故障可能会使整个信道崩溃</p></li><li><p>或者一个结点偶然忘记了释放令牌，则必须调用某些恢复步骤使得令牌返回到循环来</p></li></ul><h5 id="随机接入协议（Random-access）"><a href="#随机接入协议（Random-access）" class="headerlink" title="随机接入协议（Random access）"></a>随机接入协议（Random access）</h5><p>一个传输结点总是以信道的全部速率 (即 bps) 进行发送. 有碰撞时涉及碰撞的每个结点反复重发它的帧. 直到无碰撞地通过.但是当一个结点经历一次碰撞时，它不必立刻重发该帧，<strong>相反，它在重发该帧之前等待一个随机时延。</strong></p><h6 id="1-时隙ALOHA"><a href="#1-时隙ALOHA" class="headerlink" title="1.时隙ALOHA"></a>1.时隙ALOHA</h6><p>我们做如下假设:</p><ul><li>所有帧由$L$ 比特组成.</li><li>时间被划分成长度为$L/R$ 秒的时隙, （一个时隙等于传输一帧的时间.）</li><li>结点只在时隙起点开始传输帧.</li><li>结点是同步的, 每个结点都知道时隙何时开始.</li><li>如果在一个时隙中有两个或者更多个帧碰撞, 则所有节点在该时隙结束之前 检测到该碰撞事件.</li></ul><p><strong>具体的操作：</strong></p><ul><li>在下一个时隙开始时传输整个帧.</li><li>如果没有碰撞, 则传输成功.</li><li>如果有碰撞, 以概率$p$ 在后续的每个时隙中重传, 直到成功.</li></ul><p><em>请注意如果当前时隙没重传( $1- p$概率), 并不代表下一个时隙就一定会重传, 仍然是概率 $p$.</em></p><ul><li>刚好由一个结点传输的时隙称为一个<strong>成功时隙</strong>（successful slot）</li><li>时隙多路访问协议的效率（efficiency）定义为：当由大量的活跃结点且每个结点总有大量的帧要发送时，长期运行中成功时隙的份额。</li></ul><p><strong>优点：</strong></p><ul><li>仅有一个结点时, 时隙ALOHA是全速$R$ bps连续传输的.</li><li>高度分散, 每个结点独立决定什么时候重传.</li><li>简单的协议.</li></ul><p><strong>ALOHA最大效率的推导:</strong></p><p>先假设每个结点试图在每个时隙以概率$p$传输一帧（即假设每个结点总有帧要发送，而且结点对新帧和已经经历一次碰撞的帧都以概率$p$传输）</p><p>假设$N$个结点，任何一个结点成功传送的概率是$N·p(1-p)^{N-1} $</p><p><strong>因此，当有N个活跃结点的时候，时隙ALOHA的效率是$N·p(1-p)^{N-1} $</strong></p><p>极限推导，这个协议的最大效率为$1/e=0.37$</p><p><font color="red"><strong>一些极限的见书上P301</strong></font></p><h6 id="2-纯ALOHA"><a href="#2-纯ALOHA" class="headerlink" title="2.纯ALOHA"></a>2.纯ALOHA</h6><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210619192712590.png" alt="image-20210619192712590"></p><p>当一个帧首次到达（即一个网络层数据报在发送节点从网络层传递下来），结点立刻将该帧完整地传输进广播信道。如果一个传输的帧与一个或多个传输经历了碰撞，这个结点将立即（在完全传输完它的碰撞帧之后）以概率$p$重传该帧，否则，该结点等待一个帧传输时间，在此等待后，它则以概率$p$传输该帧，或者以概率$1-p$在另一个帧时间等待（保持空闲）。</p><p>​    帧要在$t_0$ 成功传输, 需要前面和后面都没有帧来碰撞:</p><ul><li>$[t_0-1,t_0]$不能有帧,概率为$(1-p)^{N-1}$ .</li><li>当结点开始传输的时候其他结点也不能开始传输,概率为$(1-p)^{N-1}$ .</li><li>因此，一个给定的结点成功传输一次的概率是$p(1-p)^{2(N-1)}$, 极限效率为$1/2e$</li></ul><h6 id="载波侦听多路访问"><a href="#载波侦听多路访问" class="headerlink" title="载波侦听多路访问"></a>载波侦听多路访问</h6><ul><li>说话之前必听：其他人正在说话，等到他们说完话为止。这被称为载波侦听（carrier sensing）</li><li>如果与他人同时开始说话，停止说话，这被称为碰撞检测（collision detection）</li></ul><p>以上两个规则包含在载波侦听多路访问(Carrier Sense Multiple Access, CSMA)和具有碰撞检测的CSMA(CSMA with Collision Detection , CSMA/CD)中</p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210619204720884.png" alt="image-20210619204720884" style="zoom:67%;"><p>如上图：</p><ul><li>左边: CSMA<ul><li>显然广播信道的端到端信道传播时延（channel propagation delay）（信号从一个结点传播到另一个结点所花费的时间）在决定其性能方面起着关键的作用。</li><li>该传播时延越长，载波侦听结点不能侦听到网络中另一个结点已经开始传输的机会就越大</li></ul></li><li>右边 CSMA/CD<ul><li>这两个结点在检测到碰撞后很短时间内放弃了传输</li></ul></li></ul><p><strong>CSMA/CD 运行:</strong></p><ol><li><p>适配器从网络层获取数据报, 封装成链路层帧.</p></li><li><p>适配器如果侦听到信道空闲, 则开始传输. 否则等待.</p></li><li><p>传输过程中监视来自其他使用该广播信道的适配器的信号能量存在.</p></li><li><p>如果监视到其他信号能量, 则停止传输.（停止传输帧）</p></li><li><p>停止后等待随机时间量, 转到2.（ 转到2还要侦听是否空闲）.</p></li></ol><p>碰撞后等待的随机时间量: 二进制指数退避法, 经历$n$ 次碰撞则随机地从${0,1,\dots,2^n-1}$ 中选择一个$K$ . 等待的实际时间量是$K·512$ 比特时间（即发送512比特进入以太网所需时间量的$K$倍）. 例子:</p><ul><li>第一次碰撞: $K$从${0,1}$ 中随机.</li><li>第二次碰撞: $K$从${0,1,2,3}$ 中随机.</li><li>第三次碰撞: $K$从${0,1,\dots,7}$ 中随机.</li></ul><p><font color="red"><strong>CSMA/CD效率分析</strong></font></p><p>当只有一个结点有一个帧发送时，该结点能够以信道全速率进行传输。</p><p>我们将CSMA/CD效率分析定义为：当有大量的活跃结点，且每个结点有大量的帧要发送时，帧在信道中无碰撞地传输的那部分时间在长期运行时间中所占的份额。</p><p>为了给出效率的一个闭式的近似表示，令$d_{prop}$表示信号能量在任意两个适配器之间传播所需要的最大时间。令$d_{trans}$表示传输一个最大长度的以太网帧的时间。</p><p>效率为<br>$$<br>\frac{1}{1+5d_{prop}/d_{trans}}<br>$$<br><font color="blue">注意：前面提及多路访问协议的两个理想特性：①当只有一个结点活跃时，该活跃结点就具有 R bps的吞吐量②当有M个结点活跃时，每个活跃结点的吞吐量接近R/M bps；但是ALOHA和CSMA协议具备第一个特性，但是不具备第二个特性</font></p><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><h4 id="局域网的构成：拓扑结构、传输媒介"><a href="#局域网的构成：拓扑结构、传输媒介" class="headerlink" title="局域网的构成：拓扑结构、传输媒介"></a>局域网的构成：拓扑结构、传输媒介</h4><h5 id="不同的拓扑结构"><a href="#不同的拓扑结构" class="headerlink" title="不同的拓扑结构"></a>不同的拓扑结构</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210619220133402.png" alt="image-20210619220133402"></p><h5 id="不同类型的LANs"><a href="#不同类型的LANs" class="headerlink" title="不同类型的LANs"></a>不同类型的LANs</h5><ul><li>令牌环（Token Ring）</li><li>以太网（Ethernet）</li><li>无线 LAN（Wireless LAN）</li></ul><h4 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h4><h5 id="网桥的作用和工作原理"><a href="#网桥的作用和工作原理" class="headerlink" title="网桥的作用和工作原理"></a>网桥的作用和工作原理</h5><ul><li><p>作用：网桥也叫桥接器，是连接两个局域网的一种存储/转发设备，它能将一个大的LAN分割为多个网段，或将两个以上的LAN互联为一个逻辑LAN，使LAN上的所有用户都可访问服务器。</p></li><li><p>Requirements of Bridges:</p><ul><li>Store and Forward<ul><li>读取在一个LAN上传输的帧，检查这些帧的MAC地址，有选择性的存储这些去往其他LANs的地址</li><li>利用在第二个LAN上的MAC协议，重传这些帧</li></ul></li><li>Transparent<ul><li>结点不能意识到网桥的存在</li></ul></li><li>Plug-and-play，self-learning<ul><li>网桥是不需要配置的</li></ul></li></ul></li><li><p>工作原理：</p><ul><li>IEEE 802.1D, MAC level<ul><li>用MAC地址进行switch的</li></ul></li><li>Relaying MAC frames<img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620104741742.png" alt="image-20210620104741742"></li></ul></li></ul><p><font color="red">广播风暴问题：</font></p><ul><li><p>问题存在的原因：Loops!</p></li><li><p>最简单避免问题的方法：</p><ul><li>生成一个不会含有环的拓扑结构：生成树</li><li>生成树协议（Perlman’85）</li></ul></li></ul><h5 id="路由机制：转发表、地址学习、生成树算法、路由发现机制"><a href="#路由机制：转发表、地址学习、生成树算法、路由发现机制" class="headerlink" title="路由机制：转发表、地址学习、生成树算法、路由发现机制"></a>路由机制：转发表、地址学习、生成树算法、路由发现机制</h5><h6 id="转发表"><a href="#转发表" class="headerlink" title="转发表"></a>转发表</h6><p>Maintain forwarding database for each port</p><ul><li>&lt;Mac Address, Port, Timestamp&gt;: station addresses reached through each port</li></ul><ul><li></li></ul><h6 id="生成树算法"><a href="#生成树算法" class="headerlink" title="生成树算法"></a><strong>生成树算法</strong></h6><ul><li><p>Pick a root</p><ul><li>Pick the one with the smallest identifier (MAC addr.)</li></ul></li><li><p>Compute shortest paths to the root</p><ul><li>No shortest path can have a cycle</li><li>Only keep the links on shortest-paths</li><li>Break ties in some way (so we only keep one shortest path from each node)</li></ul></li><li></li><li><p><strong>When there are multiple shortest paths to the root, choose the path that uses the neighbor with the lower ID</strong></p><ul><li><strong>One could use any tiebreaking system, but this is an easy one to remember and implement</strong></li></ul></li></ul><p><strong>Messages(Y, d ,X)</strong></p><ul><li><p>从结点X</p></li><li><p>Y作为根节点</p></li><li><p>有一个去往Y的距离d</p></li></ul><p>Switches elect the node with smallest identifier (MAC address) as root</p><p>Each node determines if a link is on its shortest path to the root; excludes it from the tree if not</p><ul><li>（初始的时候，每个结点都是将自己视为根节点）Initially, each node proposes itself as the root<ul><li>（结点X对其邻居宣布(X, 0, X)）Switch X announces (X, 0, X) to its neighbors</li></ul></li><li>（每个结点更新他们视野中的root）Nodes update their view of the root<ul><li>（一旦从Z接受到(Y,d,Z)检查Y的id）Upon receiving (Y, d, Z) from Z, check Y’s id</li><li>If Y’s id &lt; current root:set root =Y</li></ul></li><li>Nodes compute their distance from the root<ul><li>Add 1 to the shortest distance received from a neighbor</li></ul></li><li>If root or shortest distance to it changed, send neighbors updated message (Y, d+1, X)</li></ul><h6 id="路由发现机制"><a href="#路由发现机制" class="headerlink" title="路由发现机制"></a>路由发现机制</h6><ul><li>Switch learns how to reach nodes by remembering where flooding packets came from<pre><code>（交换机通过记住flooding的包从哪里来去学习如何到达结点）</code></pre><ul><li>If flood packet from Node A entered bridegroom on port 4, then bridge uses port 4 to send to Node A</li></ul></li></ul><h6 id="地址学习"><a href="#地址学习" class="headerlink" title="地址学习"></a><strong>地址学习</strong></h6><p>flooding算法不浪费吗？</p><p>是的，但是我们可以利用它去更加有效率的forwarding</p><p>想法：观察packets从哪里来的</p><ul><li>如果结点A发现从一个特定的端口来了一个来自结点B的包，那么其就应该知道哪个端口需要使用去到达B</li><li>因为只有一条通往B的路</li></ul><p>地址学习：</p><p>每一个网桥都有一个forwarding的数据库</p><ul><li>这个可以被学习的</li><li>当帧到达端口X的时候，从端口X的就和该LAN绑在一起</li><li>利用source address去更新forwarding 数据库为了端口X的去包含此地址</li><li>time off机制</li><li>每一次时间帧到达的时候，source address检查转发表</li></ul><p><font color="blue"> 总结：</font></p><p>对于一个从端口X到达的帧</p><ul><li>在转发表中搜索</li><li>找不到，flooding去往其他的除了X的端口</li><li>list for 端口X，drop</li><li>list for 端口Y，check端口Y是block还是forwarding的状态，<ul><li>如果是forwarding state就传输它</li></ul></li><li><strong>Blocking 是因为要形成一个树</strong></li></ul><h4 id="二三层交换机、基本工作机理"><a href="#二三层交换机、基本工作机理" class="headerlink" title="二三层交换机、基本工作机理"></a>二三层交换机、基本工作机理</h4><h5 id="Layer-2-Switch"><a href="#Layer-2-Switch" class="headerlink" title="Layer 2 Switch"></a>Layer 2 Switch</h5><ul><li>链路层<ul><li>存储并转发以太网帧</li><li>检查进来的帧的MAC地址，有选择的转发，使用CSMA/CD来访问segment</li></ul></li><li>透明</li><li>自学习的</li><li>Switch vs. Bridge:<ul><li>Bridge: connect LANs (normally 2-4 ports)</li><li>Switch: connect multiple hosts/subnets (a lot of ports, can achieve collision-free transmission)</li></ul></li></ul><p>Layer 2 Switch Benefits</p><ul><li>No changeto attached stationsto convert bus/hub LAN to switched LAN<ul><li>ForEthernet LAN, each station usesEthernet MAC protocol</li></ul></li><li>Stationhas dedicated capacityequal to original LAN<ul><li>Assumingswitch has sufficient capacity to keep up with all stations</li></ul></li><li>Layer2 switch scales easily<ul><li>New layer 2 switch added to accommodate additional stations</li></ul></li></ul><p>Summary of switch frame forwarding</p><p>when frame received at switch:</p><ol><li>record incoming link, MAC address of sending host</li><li>index switch table using MAC destination address</li><li>ifentry found for destinationthen {<br>ifdestination on segment from which frame arrivedthendrop frame<br>elseforward frame on interface indicated by entry<br>}<br>elseflood /* forward on all interfaces except arriving<br>interface */</li></ol><h5 id="Layer-3-Switch"><a href="#Layer-3-Switch" class="headerlink" title="Layer 3 Switch"></a>Layer 3 Switch</h5><p>随着结点的数量增加，layer 2 switch有些不足</p><ul><li>广播过载<ul><li>由二层交换机连接的一组工作站和局域网络构成单一的物理网络</li><li>所有节点共用一个MAC广播地址</li><li>广播下，layer 2 switch成为了集线器</li></ul></li><li>缺少多条路径<ul><li>利用的是生成树作为routing</li><li>在两个结点只有一条路</li><li>解决方法：<ul><li>Break up LANs into sub-networks connected by switches using router functions (layer 3 switch)</li><li>MAC广播帧仅限于单个子网络</li></ul></li></ul></li></ul><p>Layer 3 Switch：</p><ul><li>Implement packet-forwarding (IP) logic of a router in hardware</li><li>Interconnecting similar LANs, as in layer 2 switches</li></ul><h4 id="比较：Bridge-hub-Layer-2-Switch-Layer-3-Switch-Router"><a href="#比较：Bridge-hub-Layer-2-Switch-Layer-3-Switch-Router" class="headerlink" title="比较：Bridge,hub,Layer 2 Switch,Layer 3 Switch,Router"></a>比较：Bridge,hub,Layer 2 Switch,Layer 3 Switch,Router</h4><ul><li>Hubs : physical repeaters</li><li>Bridges ：connecting LANs (forwarding + address learning)</li><li>Layer2 switches: connecting Hosts or LANs (bridge functions + collision free)</li><li>Layer3 switches: involving router functions</li><li>Router:</li></ul><p>hub就是一个端口接收到，从其他端口发出去，然后bridge是连接LANs的，实现局域网之间的有选择转发，layer2 switch就是连接LANs和独立的Host，基于mac地址进行有选择转发，缓存里没有的话就和hub一样，layer3 swiitch和layer2的差不多，但是基于ip地址，减少转发的跳数，router是运行在网络层的，基于ip地址完成子网之间的转发，然后子网可以是不同类型的？</p><p>第三层交换机和路由器区别是硬件实现和软件实现</p><h4 id="令牌环：基本工作原理"><a href="#令牌环：基本工作原理" class="headerlink" title="令牌环：基本工作原理"></a>令牌环：基本工作原理</h4><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210619220608133.png" alt="image-20210619220608133"></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210619220559547.png" alt="image-20210619220559547"></p><h3 id="MAC地址发现"><a href="#MAC地址发现" class="headerlink" title="MAC地址发现"></a>MAC地址发现</h3><h4 id="自动地址配置：DHCP"><a href="#自动地址配置：DHCP" class="headerlink" title="自动地址配置：DHCP"></a>自动地址配置：DHCP</h4><p>动态主机配置协议</p><p>一个host利用DHCP去发现</p><ul><li>其ip地址</li><li>其网络掩码</li><li>其本地的DNS服务器的ip地址</li><li>其第一跳“默认”路由器的ip地址</li><li><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620152316460.png" alt="image-20210620152316460"></li></ul><h6 id="Typical-Procedure-of-DHCP"><a href="#Typical-Procedure-of-DHCP" class="headerlink" title="Typical Procedure of DHCP"></a>Typical Procedure of DHCP</h6><ul><li>首先是client广播一个DHCP-Discover的信息在其子网中</li><li>每个服务器可能会response一个DHCP-OFFER的信息</li><li>然后client会选择一个服务器，广播DHCP-Request的信息（包含服务的ip）</li><li>这个被选中的服务器就会response用一个DHCP-ACK信息</li><li>client用这个返回的信息来设置其参数</li></ul><ul><li>client用DHCP-Release来解除绑定</li></ul><p>几个可能会产生的failure</p><ul><li>网络failure了怎么办？<img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620152414130.png" alt="image-20210620152414130"><ul><li>ACKs和Refreshes就不能通过了</li><li>XYZ释放地址；DHCP服务器回收再利用它</li></ul></li><li>DHCP服务器fails<ul><li>来自服务器的ACKs停止</li><li>XYZ 在O(lease period)后释放地址；send新的request</li><li>一个新的DHCP服务器可以从一个’cold start’继续开始，然后重回正轨</li></ul></li><li>XYZ损害<ul><li>refresh停止</li><li>在O(lease period)后服务器回收a.b.c.d</li></ul></li></ul><h4 id="MAC地址解析：ARP"><a href="#MAC地址解析：ARP" class="headerlink" title="MAC地址解析：ARP"></a>MAC地址解析：ARP</h4><p><strong>On LAN, ARP is used get a host/router’s MAC given its IP address</strong></p><p><strong>ARP (Address Resolution Protocol) Only works in a LAN</strong></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620153349346.png" alt="image-20210620153349346"></p><p><strong>如果dst很远怎么办？</strong></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620153933949.png" alt="image-20210620153933949"></p><p><strong>总结：Key ideas in both ARP and DHCP</strong></p><ul><li>广播</li><li>缓存</li><li>soft state<ul><li>有个与time-to-live的相关</li><li>要么刷新要么丢弃信息</li><li>对于难以预料的变化的鲁棒性的关键</li></ul></li></ul><p><font color="red"><strong>各个层之间的联系：</strong></font></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620151205522.png" alt="image-20210620151205522"></p><h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><h4 id="媒体接入控制：CSMA的基本思想"><a href="#媒体接入控制：CSMA的基本思想" class="headerlink" title="媒体接入控制：CSMA的基本思想"></a>媒体接入控制：CSMA的基本思想</h4><h4 id="CSMA-CD的工作原理"><a href="#CSMA-CD的工作原理" class="headerlink" title="CSMA/CD的工作原理"></a>CSMA/CD的工作原理</h4><h5 id="冲突检测的方式"><a href="#冲突检测的方式" class="headerlink" title="冲突检测的方式"></a>冲突检测的方式</h5><ul><li>With CSMA, collisionoccupies medium for duration of transmission<ul><li>Colliding transmissions aborted once detected</li></ul></li><li>Stations listen whilst transmitting<ul><li>1.If medium idle, transmit;otherwise, step 2</li><li>2.If busy, listen for idle, then transmit immediately</li><li>3.If collision detected, send jam signal then abort</li><li>4.After jam, wait random time then start from step 1</li></ul></li></ul><p>Jam信号是连续几个字节全1的信号，旨在加强冲突，使其他设备易于检测</p><h5 id="冲突检测与传播-传输时延的关系"><a href="#冲突检测与传播-传输时延的关系" class="headerlink" title="冲突检测与传播/传输时延的关系"></a>冲突检测与传播/传输时延的关系</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620154239008.png" alt="image-20210620154239008"></p><h5 id="二进制指数退避算法"><a href="#二进制指数退避算法" class="headerlink" title="二进制指数退避算法"></a>二进制指数退避算法</h5><h5 id="最小帧长和最大范围（？）"><a href="#最小帧长和最大范围（？）" class="headerlink" title="最小帧长和最大范围（？）"></a>最小帧长和最大范围（？）</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620150926385.png" alt="image-20210620150926385"></p><h4 id="IEEE-802-3以太网规约"><a href="#IEEE-802-3以太网规约" class="headerlink" title="IEEE 802.3以太网规约"></a>IEEE 802.3以太网规约</h4><h5 id="以太网媒介"><a href="#以太网媒介" class="headerlink" title="以太网媒介"></a>以太网媒介</h5><p>初始：是一个基于集线器的星形拓扑以太网，hub是一种物理层设备，作用与各个比特而不是作用于帧。一个比特到达接口时，集线器只是重新生成该比特，能量强度放大，</p><h5 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620160937743.png" alt="image-20210620160937743"></p><p>前同步码（8字节）：前7个字节用于“唤醒”接受适配器，并将他们的时钟和发送方的时钟同步；（为啥时钟不同步：适配器A 的目的是根据以太局域网的类型来传输帧）最后一个字节的最后两个比特（第一个出现的两个1警告适配器B）</p><p>CRC</p><p>数据字段：承载了ip数据报，以太网的最大传输单位是1500字节，注意分片和填充</p><p>目的地址：MAC（6字节）</p><p>源地址：MAC（6字节）</p><p>类型：（2字节）</p><ul><li><p>哨兵位</p></li><li><p>位填充</p><ul><li>Sender always inserts a 0 after five 1s in the frame contents</li><li>Receiver always removes a 0 appearing after five 1s</li><li><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620162717086.png" alt="image-20210620162717086"></li></ul></li></ul><h3 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h3><ul><li>树形交换局域网的缺陷<ul><li>缺乏流量隔离: 单播能够隔离, 但广播不行; 缺乏安全隐私的隔离</li><li>交换机无效使用: 为了分组造成交换机端口的浪费</li><li>管理用户: 用户在分组间移动, 则需要改变物理布线, 连接到不同交换机</li></ul></li><li>VLAN: 单一的物理交换机定义多个虚拟局域网, 广播流量仅到达同一分组的端口<ul><li>跨VLAN需要路由器</li><li>VLAN划分: 端口 或 MAC</li><li>VLAN干线连接<ul><li>干线接口: VLAN交换机之间交换帧</li><li>帧格式802.1Q: 以太网帧的源地址和类型之间, 加入VLAN标志</li></ul></li></ul></li></ul><h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h3><h4 id="无线局域网的概念和应用"><a href="#无线局域网的概念和应用" class="headerlink" title="无线局域网的概念和应用"></a>无线局域网的概念和应用</h4><h5 id="无线链路和网络特征"><a href="#无线链路和网络特征" class="headerlink" title="无线链路和网络特征"></a>无线链路和网络特征</h5><p>信噪比SNR是所受到的信号（如被传输的信息）和噪声强度的相对测量</p><p>（更大的SNR能让它更容易的从噪声中提取信号）</p><p>BER是在接收方收到的有错传输比特的概率</p><p>网络特征</p><ul><li>对于给定的调制方案，SNR越高，BER越低</li><li>对于给定的SNR，具有较高比特传输率的调制技术（无论差错与否）将具有较高的BER</li><li>物理层调制技术的动态选择能用于适配对信道条件的调制技术</li></ul><p>隐藏终端问题</p><h5 id="Path-loss-path-attenuation"><a href="#Path-loss-path-attenuation" class="headerlink" title="Path loss/path attenuation"></a>Path loss/path attenuation</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620172031945.png" alt="image-20210620172031945"></p><p><strong>Wireless link characteristics</strong></p><ul><li><p>信号强度下降:无线电信号在通过物质传播时衰减(路径损耗)</p></li><li><p>多径传播:无线电信号从物体地面反射，到达目的地的时间略有不同</p></li><li><p>来自其他来源的干扰:其他设备(如电话)共享的标准化无线网络频率(如2.4 GHz);设备(马达)也会产生干扰</p></li></ul><p><strong>Wireless network characteristics</strong></p><ul><li>广播媒介<ul><li>每个在其中的人都可以听到并影响</li></ul></li><li>当传输的时候不能接受<ul><li>Our own (or nearby) transmission is deafening our receiver =》半双工</li><li>全双工也可以</li></ul></li><li>从发送端发出来的信号不能完整的到达接收端</li><li>多个无线的sender和receviers可能会导致许多问题<ul><li>多径传播</li><li>隐藏终端</li></ul></li></ul><h4 id="IEEE-802-11体系结构"><a href="#IEEE-802-11体系结构" class="headerlink" title="IEEE 802.11体系结构"></a>IEEE 802.11体系结构</h4><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620173718378.png" alt="image-20210620173718378"></p><h5 id="体系结构图"><a href="#体系结构图" class="headerlink" title="体系结构图"></a>体系结构图</h5><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620182144424.png" alt="image-20210620182144424"></p><h4 id="媒体接入控制CSMA-CA"><a href="#媒体接入控制CSMA-CA" class="headerlink" title="媒体接入控制CSMA/CA"></a>媒体接入控制CSMA/CA</h4><p>CSMA/CA运行流程, 假定有一个帧要发送:</p><ol><li>如果监听到信道空闲, 将在一个 分布式帧间间隔(DIFS)的短时间段后发送该帧.</li><li>否则选取一个随机回退值:</li><li>在侦听信道空闲时递减该值.</li><li>在侦听信道忙是保持不变.</li><li>当递减为0时, 该站点发送整个数据帧并等待确认.</li><li>未收到确认则去第2步并在更大范围选取随机值.</li></ol><p>部分见《其他》</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620182723028.png" alt="image-20210620182723028"></p><p>RTS和CTS帧在两个重要方面提高性能:</p><ul><li>隐藏终端问题缓解了, 长数据帧只有在信道预约之后才能被传输.</li><li>一旦RTS, CTS帧被正确传输, 后序数据帧和ACK帧可以无碰撞地发送.</li></ul><p>但是RTS/CTS引入了时延以及消耗了信道资源. 所以RTS/CTS交换仅仅用于长数据帧的预约信道.</p><p><strong>在相同的IP子网中的移动性</strong></p><ul><li>通过交换机互联: 在移动过程中可以保持自己的IP地址和所有正在进行的TCP连接.</li><li>通过路由器互联: 在移动过程中TCP连接将打断, 因为H1需要在进入的子网中获得一个新的地址</li></ul><h5 id="分布式协调功能"><a href="#分布式协调功能" class="headerlink" title="分布式协调功能"></a>分布式协调功能</h5><p>The lower sub-layer is <strong>distributed coordination function</strong> (DCF,分布式协调功能，分布式控制，用于传输异步数据，优先级最低)</p><p>DCF 方式：（不使用基站）是 MAC 中最基本的介质接入控制机制。DCF 机制基于 CSMA，并以RTS/CTS 握手机制作为辅助的介质访问方式。这种控制方式利用载波侦听机制，适用于分布式网络。</p><h5 id="点协调功能"><a href="#点协调功能" class="headerlink" title="点协调功能"></a>点协调功能</h5><p>The upper is <strong>point coordination function</strong> (PCF,点协调功能，集中式控制，用于发送实时数据，优先级仅次于控制帧)</p><p><strong>超级帧</strong></p><p>点协调器不断发布轮询，会封锁所有异步通信量。为了避免这种情况，在超帧时间的前一部分，由点协调器轮询，在超帧时间的后一部分，允许异步通信量争用接入。</p><p>（使用基站）适用于具有中央控制器的网络中。</p><h6 id="帧间间隔（IFS-interframe-space）"><a href="#帧间间隔（IFS-interframe-space）" class="headerlink" title="帧间间隔（IFS: interframe space）"></a>帧间间隔（IFS: interframe space）</h6><p>为了尽量避免碰撞，802.11规定，所有的站在完成发送后，必须再等待一段很短的时间（继续监听）才能发送下一帧。至于各种帧间间隔的具体长度，这取决于使用的物理层特性。</p><p>这段时间的通称是帧间间隔IFS。帧间间隔的长短取决于该站要发送的帧的类型。高优先级的帧需要等待的时间较短.<strong>时间越短，表示其对应的优先级越高</strong></p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620184655389.png" alt="image-20210620184655389" style="zoom:50%;"><ul><li>SIFS：短帧间间隔<ul><li>SIFS是最短的时间区间，用来间隔需要立即相应的帧（RTS、CTS、ACK）等。在帧交换顺序的两次传输之间使用最短间隔，可以防止其他正在等待介质的站点试图使用介质</li></ul></li><li>PIFS：只能够由工作于PCF模式的站点来使用</li><li>DIFS：只能够由工作于DCF模式的站点来使用</li><li>EIFS: 在前一帧出错的情况下，发送节点 不得不延迟 EIFS 而不是DIFS时间段，再发送下一帧。</li></ul><p><strong>IEEE 802.11 Medium Access Control Logic</strong></p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620185101086.png" alt="image-20210620185101086"></p><h5 id="与以太网的CSMA-CD相比较"><a href="#与以太网的CSMA-CD相比较" class="headerlink" title="与以太网的CSMA/CD相比较"></a>与以太网的CSMA/CD相比较</h5><ul><li>CSMA/CD 一旦侦听到信道空闲就发送.</li><li>CSMA/CA 空闲了但要递减计数器抑制传输.</li></ul><h4 id="802-11的帧类型和帧格式"><a href="#802-11的帧类型和帧格式" class="headerlink" title="802.11的帧类型和帧格式"></a>802.11的帧类型和帧格式</h4><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620183229060.png" alt="image-20210620183229060"></p><p>Address 4：在自组织模式中使用的地址</p><p>Address 1：接受该帧的无线站点orAP的mac地址</p><p>Address 2： 传输该帧的无线站点orAP的mac地址</p><p>Address 3： 与AP相连的路由器端口的mac地址</p><p><img src="C:\Users\周俊杰\AppData\Roaming\Typora\typora-user-images\image-20210620183708959.png" alt="image-20210620183708959"></p><h4 id="802-11b-g频段及传输速率"><a href="#802-11b-g频段及传输速率" class="headerlink" title="802.11b/g频段及传输速率"></a>802.11b/g频段及传输速率</h4><p>802.11 是一种无线局域网标准,802.11 a/b/g/n/ac 都是由802.11 发展而来的。不同的后缀代表着不同的物理层标准工作频段和不同的传输速率，也就是说它们的物理层和传输速度不同。</p><p>802.11b:工作在2.4G频段，提供每秒11M速率，平均范围50多米。信号 HR-DSSS</p><p> 802.11g:工作在2.4G频段，每秒大于20M带宽，平均每秒20—30M，平均范围50多米。信号OFDM</p><p>早期的无线规格制定了在RF<a href="https://baike.baidu.com/item/%E5%B0%84%E9%A2%91/775402">射频</a>频段2.4GHz上的运用，并且提供了1Mbps、2Mbps和许多基础信号传输方式与服务的传输速率规格。IEEE <a href="https://baike.baidu.com/item/802.11a/611704">802.11a</a>和IEEE <a href="https://baike.baidu.com/item/802.11b/611774">802.11b</a>标准则分别为5.8GHz和2.4GHz频段做定义。这两组新的标准也定义了IEEE 802.11a中5Mbps、11Mbps到54Mbps速率的新<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82/4329158">物理层</a>。</p><p>相比而言，802.11a要比802.11b更具有速度优势，但由于成本问题制约了其发展，因此其并没有得到广泛的推广。802.11b仍为无线网络的主流标准之一，但802.11b仍存在传输速度较慢的问题，<a href="https://baike.baidu.com/item/802.11g">802.11g</a>应运而生。</p><p>802.11g是<a href="https://baike.baidu.com/item/802.11b/611774">802.11b</a>的后继者，其同样使用2.4GHz频段，802.11b使用了<a href="https://baike.baidu.com/item/DSSS/3112195">DSSS</a>（<a href="https://baike.baidu.com/item/%E7%9B%B4%E6%8E%A5%E5%BA%8F%E5%88%97%E6%89%A9%E9%A2%91">直接序列扩频</a>）或CCK（<a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613">补码</a><a href="https://baike.baidu.com/item/%E9%94%AE%E6%8E%A7/10963359">键控</a>调制），而802.11g则使用和<a href="https://baike.baidu.com/item/802.11a/611704">802.11a</a>相同的<a href="https://baike.baidu.com/item/OFDM/5790826">OFDM</a>（正交<a href="https://baike.baidu.com/item/%E9%A2%91%E5%88%86%E5%A4%8D%E7%94%A8/7626706">频分复用</a>调制）技术，使其传输速率是b的5倍，也就是54Mbps。</p><p><a href="https://baike.baidu.com/item/802.11g/611811">802.11g</a>和802.11b两种标准可以相互兼容使用，但在使用时仍需注意，802.11g的设备在802.11b的网络环境下使用只能使用802.11b标准，其<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%80%9F%E7%8E%87/8907360">数据速率</a>只能达到11Mbps。</p><h3 id="差错检测和纠正技术"><a href="#差错检测和纠正技术" class="headerlink" title="差错检测和纠正技术"></a>差错检测和纠正技术</h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><h4 id="二维奇偶校验"><a href="#二维奇偶校验" class="headerlink" title="二维奇偶校验"></a>二维奇偶校验</h4><h6 id="前向纠错"><a href="#前向纠错" class="headerlink" title="前向纠错"></a>前向纠错</h6><h4 id="循环冗余检测"><a href="#循环冗余检测" class="headerlink" title="循环冗余检测"></a>循环冗余检测</h4><p>CRC编码</p><p>d比特的数据D，发送方和接收方必须先协商一个r+1比特模式，称为生成多项式G；</p><p>G的最高有效位的比特是1</p><p>过程：接收方用G于除接受到的d+r比特，如果余数非0，出现差错；否则接收方认为正确</p><p>所有的CRC采用模2算数来做，在加法中不进位，减法不借位；这意味着加法减法相同，而且这两种操作等价于操作数的按位异或（XOR）</p><h3 id="网络传输媒介利用率分析"><a href="#网络传输媒介利用率分析" class="headerlink" title="网络传输媒介利用率分析"></a>网络传输媒介利用率分析</h3><h4 id="Point-to-point-link"><a href="#Point-to-point-link" class="headerlink" title="Point-to-point link"></a>Point-to-point link</h4><h4 id="ALOHA，Slotted-ALOHA"><a href="#ALOHA，Slotted-ALOHA" class="headerlink" title="ALOHA，Slotted ALOHA"></a>ALOHA，Slotted ALOHA</h4><h5 id="Slotted-ALOHA"><a href="#Slotted-ALOHA" class="headerlink" title="Slotted ALOHA"></a>Slotted ALOHA</h5><h5 id="pure-ALOHA"><a href="#pure-ALOHA" class="headerlink" title="pure ALOHA"></a>pure ALOHA</h5><h4 id="令牌环"><a href="#令牌环" class="headerlink" title="令牌环"></a>令牌环</h4><h4 id="CSMA-CD（p-persistent）的简单性能模型"><a href="#CSMA-CD（p-persistent）的简单性能模型" class="headerlink" title="CSMA/CD（p-persistent）的简单性能模型"></a>CSMA/CD（p-persistent）的简单性能模型</h4><p>Stations listen whilst transmitting<br>1.If medium idle, transmit;otherwise, step 2<br>2.If busy, listen for idle, then transmit immediately<br>3.If collision detected, send jam signal then abort<br>4.After jam, wait random time then start from step 1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to my Blog!</title>
      <link href="/zjj.github.io/hello-world/"/>
      <url>/zjj.github.io/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello-everyone"><a href="#Hello-everyone" class="headerlink" title="Hello, everyone"></a>Hello, everyone</h3><p><font color="red"><strong>my blog is here!!</strong></font></p><p><strong><font color="cornflowerblue"><a href="https://github.com/zhoujunjie2001">this is my github</a> </font></strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
